diff --git a/node_modules/react-native-video/README.md b/node_modules/react-native-video/README.md
index 1b6a913..be88eed 100644
--- a/node_modules/react-native-video/README.md
+++ b/node_modules/react-native-video/README.md
@@ -1,3 +1,73 @@
+## [fork] ExoPlayer with cache
+
+This fork adds caching feature to react-native-video component for Android (ExoPlayer mode only)
+
+To enable caching, just add the `useCache` prop to the `Video` component:
+```javascript
+
+  render() {
+    return (
+      <Video
+        ...
+        useCache={true}
+      />
+    )
+  }
+```
+
+If `useCache` prop is set, cache will be used for all non-streamed content (ie. except for Microsoft SmoothSteaming, DASH, HLS)
+
+Caching is implemented using SimpleCache class with LRU evictor.
+
+By default, cache max size is 100MB and will store files to `${ExternalCacheDir}/exoplayercache` subfolder but this config can be overriden using dedicated exported `ExoPlayerCache.initializeCache` method:
+
+```javascript
+import { ExoPlayerCache } from 'react-native-video'
+
+...
+
+ExoPlayerCache.initializeCache(cacheChildFolder, cacheMaxSize)
+
+```
+
+Note: of course this method should be called quite early, otherwise cache will be initialized with default values the first time a `<Video/>` with `useCache` prop is rendered.
+
+For debugging purposes, a `getCacheStats()` method can be called to retrive some stats about the current state of the cache.
+
+```javascript
+import { ExoPlayerCache } from 'react-native-video'
+
+...
+
+ExoPlayerCache.getCacheStats()
+  .then(cacheStats => {
+    console.log(cacheStats)
+  })
+```
+
+Sample cacheStats output:
+```
+{
+  "entries": [ // Array of cached contents
+    {
+      "cachedSpans": [ // Array of cached segments
+        {
+          "lastTouch": "2020-12-31T11:25:18Z",
+          "position": 0,
+          "length": 5242880,
+          "isCached": true
+        },
+        ...
+      ],
+      "key": "https://domain.com/video.mp4" // content url
+    },
+    ...
+  ],
+  "cacheSpace": 38465791, // total cache space
+  "cacheFolder": "xxx/exoplayercache" // cache folder
+}
+```
+
 ## react-native-video
 
 A `<Video>` component for react-native, as seen in
diff --git a/node_modules/react-native-video/Video.js b/node_modules/react-native-video/Video.js
index b492d48..bda95e9 100644
--- a/node_modules/react-native-video/Video.js
+++ b/node_modules/react-native-video/Video.js
@@ -13,7 +13,16 @@ const styles = StyleSheet.create({
   },
 });
 
-export { TextTrackType, FilterType, DRMType };
+const {
+  ExoPlayerCache
+} = NativeModules;
+
+export { 
+  TextTrackType,
+  FilterType,
+  DRMType,
+  ExoPlayerCache
+};
 
 export default class Video extends Component {
 
@@ -236,8 +245,8 @@ export default class Video extends Component {
   _onGetLicense = (event) => {
     if (this.props.drm && this.props.drm.getLicense instanceof Function) {
       const data = event.nativeEvent;
-      if (data && data.spcBase64) {
-        const getLicenseOverride = this.props.drm.getLicense(data.spcBase64, data.contentId, data.licenseUrl);
+      if (data && data.spc) {
+        const getLicenseOverride = this.props.drm.getLicense(data.spc, data.contentId, data.spcBase64, this.props);
         const getLicensePromise = Promise.resolve(getLicenseOverride); // Handles both scenarios, getLicenseOverride being a promise and not.
         getLicensePromise.then((result => {
           if (result !== undefined) {
diff --git a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ExoPlayerCache.java b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ExoPlayerCache.java
new file mode 100644
index 0000000..3a3b380
--- /dev/null
+++ b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ExoPlayerCache.java
@@ -0,0 +1,111 @@
+package com.brentvatne.exoplayer;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.WritableArray;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.bridge.WritableNativeArray;
+import com.facebook.react.bridge.WritableNativeMap;
+import com.google.android.exoplayer2.database.ExoDatabaseProvider;
+import com.google.android.exoplayer2.upstream.cache.CacheSpan;
+import com.google.android.exoplayer2.upstream.cache.LeastRecentlyUsedCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+
+import java.io.File;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Locale;
+import java.util.TimeZone;
+
+import androidx.annotation.NonNull;
+
+public class ExoPlayerCache extends ReactContextBaseJavaModule {
+
+    private static String DEFAULT_CACHE_CHILD_FOLDER = "exoplayercache";
+    private static long DEFAULT_CACHE_MAX_SIZE = 100 * 1024 * 1024;
+
+    private static ExoDatabaseProvider exoDatabaseProvider = null;
+    private static File cacheFolder = null;
+    private static SimpleCache videoCache = null;
+
+    public ExoPlayerCache(ReactApplicationContext reactContext) {
+        super(reactContext);
+    }
+
+    @Override
+    public String getName() {
+        return "ExoPlayerCache";
+    }
+
+    @ReactMethod
+    public void initializeCache (@NonNull String cacheChildFolder, double cacheMaxSize) {
+        _initializeCache(this.getReactApplicationContext(), cacheChildFolder, (new Double(cacheMaxSize)).longValue());
+    }
+
+    @ReactMethod
+    public void getCacheStats (final Promise promise) {
+        WritableMap cacheStats = new WritableNativeMap();
+        try {
+            if(videoCache != null) {
+                cacheStats.putString("cacheFolder", cacheFolder.getPath());
+
+                long cacheSpace = videoCache.getCacheSpace();
+                cacheStats.putDouble("cacheSpace", (double)cacheSpace);
+
+                WritableArray entries = new WritableNativeArray();
+                for(String key : videoCache.getKeys()) {
+                    WritableMap entry = new WritableNativeMap();
+                    entry.putString("key", key);
+
+                    WritableArray cachedSpans = new WritableNativeArray();
+                    for(CacheSpan cachedSpan : videoCache.getCachedSpans(key)) {
+                        WritableMap cachedSpanMap = new WritableNativeMap();
+                        cachedSpanMap.putBoolean("isCached", cachedSpan.isCached);
+                        cachedSpanMap.putDouble("length", (double)cachedSpan.length);
+                        cachedSpanMap.putDouble("position", (double)cachedSpan.position);
+
+                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
+                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+                        cachedSpanMap.putString("lastTouch", dateFormat.format(new java.util.Date(cachedSpan.lastTouchTimestamp)));
+
+                        cachedSpans.pushMap(cachedSpanMap);
+                    }
+                    entry.putArray("cachedSpans", cachedSpans);
+
+                    entries.pushMap(entry);
+                }
+                cacheStats.putArray("entries", entries);
+            }
+        } catch (Exception e) {
+            promise.reject("getCacheStats error", e.getMessage());
+            return;
+        }
+
+        promise.resolve(cacheStats);
+    }
+
+    private static void _initializeCache(Context context, String cacheChildFolder, long cacheMaxSize) {
+        if(videoCache != null) {
+            return;
+        }
+        exoDatabaseProvider = new ExoDatabaseProvider(context);
+        cacheFolder = new File(context.getExternalCacheDir(), cacheChildFolder);
+        videoCache = new SimpleCache(
+            cacheFolder,
+            new LeastRecentlyUsedCacheEvictor(cacheMaxSize),
+            exoDatabaseProvider
+        );
+    }
+
+    public static SimpleCache getVideoCache(Context context) {
+        if(videoCache == null) {
+            _initializeCache(context, DEFAULT_CACHE_CHILD_FOLDER, DEFAULT_CACHE_MAX_SIZE);
+        }
+        return videoCache;
+    }
+}
diff --git a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerView.java b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerView.java
index b41b276..a5258c1 100644
--- a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerView.java
+++ b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerView.java
@@ -70,8 +70,11 @@ import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultAllocator;
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
 import com.google.android.exoplayer2.util.Util;
 
+import java.io.File;
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
@@ -156,6 +159,7 @@ class ReactExoplayerView extends FrameLayout implements
     private String drmLicenseUrl = null;
     private String[] drmLicenseHeader = null;
     private boolean controls;
+    private boolean useCache;
     // \ End props
 
     // React
@@ -281,8 +285,8 @@ class ReactExoplayerView extends FrameLayout implements
                 eventEmitter.bandwidthReport(bitrate, 0, 0, "-1");
             } else {
                 Format videoFormat = player.getVideoFormat();
-                int width = videoFormat != null ? videoFormat.width : 0;
-                int height = videoFormat != null ? videoFormat.height : 0;
+                int width = videoFormat != null ? ((videoFormat.rotationDegrees==0 || videoFormat.rotationDegrees==180) ? videoFormat.width : videoFormat.height) : 0;
+                int height = videoFormat != null ? ((videoFormat.rotationDegrees==0 || videoFormat.rotationDegrees==180) ? videoFormat.height : videoFormat.width) : 0;
                 String trackId = videoFormat != null ? videoFormat.id : "-1";
                 eventEmitter.bandwidthReport(bitrate, height, width, trackId);
             }
@@ -492,37 +496,61 @@ class ReactExoplayerView extends FrameLayout implements
     private MediaSource buildMediaSource(Uri uri, String overrideExtension) {
         int type = Util.inferContentType(!TextUtils.isEmpty(overrideExtension) ? "." + overrideExtension
                 : uri.getLastPathSegment());
-        switch (type) {
-            case C.TYPE_SS:
-                return new SsMediaSource.Factory(
-                        new DefaultSsChunkSource.Factory(mediaDataSourceFactory),
-                        buildDataSourceFactory(false)
-                ).setLoadErrorHandlingPolicy(
-                        config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
-                ).createMediaSource(uri);
-            case C.TYPE_DASH:
-                return new DashMediaSource.Factory(
-                        new DefaultDashChunkSource.Factory(mediaDataSourceFactory),
-                        buildDataSourceFactory(false)
-                ).setLoadErrorHandlingPolicy(
-                        config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
-                ).createMediaSource(uri);
-            case C.TYPE_HLS:
-                return new HlsMediaSource.Factory(
-                        mediaDataSourceFactory
-                ).setLoadErrorHandlingPolicy(
-                        config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
-                ).createMediaSource(uri);
-            case C.TYPE_OTHER:
-                return new ProgressiveMediaSource.Factory(
-                        mediaDataSourceFactory
+
+        MediaSource mediaSource = null;
+
+        if(this.useCache && type == C.TYPE_OTHER) {
+            try {
+                Cache videoCache = ExoPlayerCache.getVideoCache(getContext());
+                DataSource.Factory cacheDataSourceFactory = new CacheDataSourceFactory(videoCache, mediaDataSourceFactory);
+
+                mediaSource = new ProgressiveMediaSource.Factory(
+                        cacheDataSourceFactory
                 ).setLoadErrorHandlingPolicy(
                         config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
                 ).createMediaSource(uri);
-            default: {
-                throw new IllegalStateException("Unsupported type: " + type);
+            } catch (Exception e) { }
+        }
+
+        if(mediaSource == null) {
+            switch (type) {
+                case C.TYPE_SS:
+                    mediaSource = new SsMediaSource.Factory(
+                            new DefaultSsChunkSource.Factory(mediaDataSourceFactory),
+                            buildDataSourceFactory(false)
+                    ).setLoadErrorHandlingPolicy(
+                            config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
+                    ).createMediaSource(uri);
+                    break;
+                case C.TYPE_DASH:
+                    mediaSource = new DashMediaSource.Factory(
+                            new DefaultDashChunkSource.Factory(mediaDataSourceFactory),
+                            buildDataSourceFactory(false)
+                    ).setLoadErrorHandlingPolicy(
+                            config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
+                    ).createMediaSource(uri);
+                    break;
+                case C.TYPE_HLS:
+                    mediaSource = new HlsMediaSource.Factory(
+                            mediaDataSourceFactory
+                    ).setLoadErrorHandlingPolicy(
+                            config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
+                    ).createMediaSource(uri);
+                    break;
+                case C.TYPE_OTHER:
+                    mediaSource = new ProgressiveMediaSource.Factory(
+                            mediaDataSourceFactory
+                    ).setLoadErrorHandlingPolicy(
+                            config.buildLoadErrorHandlingPolicy(minLoadRetryCount)
+                    ).createMediaSource(uri);
+                    break;
+                default: {
+                    throw new IllegalStateException("Unsupported type: " + type);
+                }
             }
         }
+
+        return mediaSource;
     }
 
     private ArrayList<MediaSource> buildTextSources() {
@@ -784,8 +812,8 @@ class ReactExoplayerView extends FrameLayout implements
             setSelectedVideoTrack(videoTrackType, videoTrackValue);
             setSelectedTextTrack(textTrackType, textTrackValue);
             Format videoFormat = player.getVideoFormat();
-            int width = videoFormat != null ? videoFormat.width : 0;
-            int height = videoFormat != null ? videoFormat.height : 0;
+            int width = videoFormat != null ? ((videoFormat.rotationDegrees==0 || videoFormat.rotationDegrees==180) ? videoFormat.width : videoFormat.height) : 0;
+            int height = videoFormat != null ? ((videoFormat.rotationDegrees==0 || videoFormat.rotationDegrees==180) ? videoFormat.height : videoFormat.width) : 0;
             String trackId = videoFormat != null ? videoFormat.id : "-1";
             eventEmitter.load(player.getDuration(), player.getCurrentPosition(), width, height,
                     getAudioTrackInfo(), getTextTrackInfo(), getVideoTrackInfo(), trackId);
@@ -1373,4 +1401,13 @@ class ReactExoplayerView extends FrameLayout implements
             }
         }
     }
+
+    /**
+     * Handling useCache prop
+     *
+     * @param useCache  Use cache prop, if true enable cache, if false disable it
+     */
+    public void setUseCache(boolean useCache) {
+        this.useCache = useCache;
+    }
 }
diff --git a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerViewManager.java b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerViewManager.java
index 0d81e0b..38f3c64 100644
--- a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerViewManager.java
+++ b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/exoplayer/ReactExoplayerViewManager.java
@@ -70,6 +70,7 @@ public class ReactExoplayerViewManager extends ViewGroupManager<ReactExoplayerVi
     private static final String PROP_SELECTED_VIDEO_TRACK_VALUE = "value";
     private static final String PROP_HIDE_SHUTTER_VIEW = "hideShutterView";
     private static final String PROP_CONTROLS = "controls";
+    private static final String PROP_USE_CACHE = "useCache";
 
     private ReactExoplayerConfig config;
 
@@ -313,6 +314,11 @@ public class ReactExoplayerViewManager extends ViewGroupManager<ReactExoplayerVi
         videoView.setControls(controls);
     }
 
+    @ReactProp(name = PROP_USE_CACHE, defaultBoolean = false)
+    public void setUseCache(final ReactExoplayerView videoView, final boolean useCache) {
+        videoView.setUseCache(useCache);
+    }
+
     @ReactProp(name = PROP_BUFFER_CONFIG)
     public void setBufferConfig(final ReactExoplayerView videoView, @Nullable ReadableMap bufferConfig) {
         int minBufferMs = DefaultLoadControl.DEFAULT_MIN_BUFFER_MS;
diff --git a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/react/ReactVideoPackage.java b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/react/ReactVideoPackage.java
index f7a5d02..5c6134a 100644
--- a/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/react/ReactVideoPackage.java
+++ b/node_modules/react-native-video/android-exoplayer/src/main/java/com/brentvatne/react/ReactVideoPackage.java
@@ -1,6 +1,7 @@
 package com.brentvatne.react;
 
 import com.brentvatne.exoplayer.DefaultReactExoplayerConfig;
+import com.brentvatne.exoplayer.ExoPlayerCache;
 import com.brentvatne.exoplayer.ReactExoplayerConfig;
 import com.brentvatne.exoplayer.ReactExoplayerViewManager;
 import com.facebook.react.ReactPackage;
@@ -9,6 +10,7 @@ import com.facebook.react.bridge.NativeModule;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.uimanager.ViewManager;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
@@ -25,7 +27,11 @@ public class ReactVideoPackage implements ReactPackage {
 
     @Override
     public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
-        return Collections.emptyList();
+        List<NativeModule> modules = new ArrayList<>();
+
+        modules.add(new ExoPlayerCache(reactContext));
+
+        return modules;
     }
 
     // Deprecated RN 0.47
diff --git a/node_modules/react-native-video/ios/Video/RCTVideo.m b/node_modules/react-native-video/ios/Video/RCTVideo.m
index 989167a..df881d0 100644
--- a/node_modules/react-native-video/ios/Video/RCTVideo.m
+++ b/node_modules/react-native-video/ios/Video/RCTVideo.m
@@ -1764,15 +1764,11 @@ didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest {
   }
   _loadingRequest = loadingRequest;
   NSURL *url = loadingRequest.request.URL;
+  NSString *contentId = url.host;
   if (self->_drm != nil) {
-    NSString *contentId;
     NSString *contentIdOverride = (NSString *)[self->_drm objectForKey:@"contentId"];
     if (contentIdOverride != nil) {
       contentId = contentIdOverride;
-    } else if (self.onGetLicense) {
-      contentId = url.host;
-    } else {
-      contentId = [url.absoluteString stringByReplacingOccurrencesOfString:@"skd://" withString:@""];
     }
     NSString *drmType = (NSString *)[self->_drm objectForKey:@"type"];
     if ([drmType isEqualToString:@"fairplay"]) {
@@ -1786,12 +1782,7 @@ didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest {
           }
           
           if (certificateData != nil) {
-            NSData *contentIdData;
-            if(self.onGetLicense) {
-              contentIdData = [contentId dataUsingEncoding:NSUTF8StringEncoding];
-            } else {
-              contentIdData = [NSData dataWithBytes: [contentId cStringUsingEncoding:NSUTF8StringEncoding] length:[contentId lengthOfBytesUsingEncoding:NSUTF8StringEncoding]];
-            }
+            NSData *contentIdData = [contentId dataUsingEncoding:NSUTF8StringEncoding];
             AVAssetResourceLoadingDataRequest *dataRequest = [loadingRequest dataRequest];
             if (dataRequest != nil) {
               NSError *spcError = nil;
@@ -1804,16 +1795,12 @@ didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest {
               }
               if (spcData != nil) {
                 if(self.onGetLicense) {
-                  NSString *base64Encoded = [spcData base64EncodedStringWithOptions:0];
+                  NSString *spcStr = [[NSString alloc] initWithData:spcData encoding:NSASCIIStringEncoding];
                   self->_requestingCertificate = YES;
-                  if (licenseServer == nil) {
-                    licenseServer = @"";
-                  }
-                  self.onGetLicense(@{@"licenseUrl": licenseServer,
+                  self.onGetLicense(@{@"spc": spcStr,
                                       @"contentId": contentId,
-                                      @"spcBase64": base64Encoded,
-                                      @"target": self.reactTag}
-                                    );
+                                      @"spcBase64": [[[NSData alloc] initWithBase64EncodedData:certificateData options:NSDataBase64DecodingIgnoreUnknownCharacters] base64EncodedStringWithOptions:0],
+                                      @"target": self.reactTag});
                 } else if(licenseServer != nil) {
                   NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
                   [request setHTTPMethod:@"POST"];
@@ -1826,17 +1813,9 @@ didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest {
                       [request setValue:value forHTTPHeaderField:key];
                     }
                   }
+                  //
 
-                  if(self.onGetLicense) {
-                    [request setHTTPBody: spcData];
-                  } else {
-                    NSString *spcEncoded = [spcData base64EncodedStringWithOptions:0];
-                    NSString *spcUrlEncoded = (NSString *) CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)spcEncoded, NULL, CFSTR("?=&+"), kCFStringEncodingUTF8));
-                    NSString *post = [NSString stringWithFormat:@"spc=%@&%@", spcUrlEncoded, contentId];
-                    NSData *postData = [post dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
-                    [request setHTTPBody: postData];
-                  }
-                  
+                  [request setHTTPBody: spcData];
                   NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
                   NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration delegate:self delegateQueue:nil];
                   NSURLSessionDataTask *postDataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
@@ -1859,12 +1838,7 @@ didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest {
                         [self finishLoadingWithError:licenseError];
                         self->_requestingCertificateErrored = YES;
                       } else if (data != nil) {
-                        if(self.onGetLicense) {
-                          [dataRequest respondWithData:data];
-                        } else {
-                          NSData *decodedData = [[NSData alloc] initWithBase64EncodedData:data options:0];
-                          [dataRequest respondWithData:decodedData];
-                        }
+                        [dataRequest respondWithData:data];
                         [loadingRequest finishLoading];
                       } else {
                         NSError *licenseError = [NSError errorWithDomain: @"RCTVideo"
